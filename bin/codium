#!/bin/sh
# shellcheck disable=2086
# Wrapper around VSCode (VSCodium)

# NOTE: Might be useful to decouple from Distrobox, more flexibility and what not...

readonly ARGS="$*"

# Currently these are hardcoded, TODO: make it not that...
# TODO: Determine from $0?
readonly CODE_BIN="/usr/bin/codium"
readonly FLATPAK_ID="com.vscodium.codium"
readonly FLATPAK_ARGS="--branch=stable --arch=x86_64 --command=/app/bin/codium --file-forwarding"

set -x

notify_log() {
    urgency="low"
    loglvl="NOTE"
    case "$1" in
        0)  shift ;;
        1)  urgency="normal"
            loglvl="WARN"
            shift ;;
        2)  urgency="critical"
            loglvl="FAIL"
            shift ;;
    esac
    notify-send --urgency="${urgency}" --icon=codium "Flatpak VSCodium" "$*"
    printf "[%s] %s\n" "${loglvl}" "$*"
}

vscode_version() {
    if [ "$VSCODE_NO_FLATPAK" = 1 ]; then
        version="$(${CODE_BIN} --version 2>/dev/null | xargs | cut -d' ' -f"${1}")"
    else
        version="$(/usr/bin/flatpak run ${FLATPAK_ARGS} "${FLATPAK_ID}" --version  2>/dev/null | xargs | cut -d' ' -f"${1}")"
    fi
    printf "%s" "${version}"
}

# Launches VSCode with $ARGS.
launch_vscode() {
    if [ "$VSCODE_NO_FLATPAK" = 1 ]; then
        exec ${CODE_BIN} ${ARGS}
    fi
    exec /usr/bin/flatpak run ${FLATPAK_ARGS} "${FLATPAK_ID}" ${ARGS}
}

if [ "$VSCODE_NO_SERVER" = 1 ]; then
    notify_log "Launching without starting REH server"
    launch_vscode
fi

WORKSPACE_DIR="${PWD}"
readonly DISTROBOX_MANIFEST=".vscode/distrobox.ini"

# Iterates up the tree to find the nearest .vscode/distrobox.ini file.
# If it reaches root w/o matching then set to nothing.
while [ ! -f "${WORKSPACE_DIR}/${DISTROBOX_MANIFEST}" ]; do
    if [ "${WORKSPACE_DIR}" = "/" ]; then
        WORKSPACE_DIR=""
        break
    fi
    WORKSPACE_DIR="$(realpath "${WORKSPACE_DIR}/..")"
done

# If the workspace directory does not contain a .vscode/ directory,
#  or .vscode/distrobox.ini is NOT a readable file,
#  launch flatpak without doing anything else.
if [ -z "${WORKSPACE_DIR}" ]; then
    launch_vscode
fi

# Add some environment variables
export DBX_NON_INTERACTIVE=1

# Begin assembling. NOTE: if multiple containers are specified, may need to handle that (can therefore break easily!).
distrobox-assemble create --file "${WORKSPACE_DIR}/${DISTROBOX_MANIFEST}" 2>/dev/stdout | while read -r line; do
    case "${line}" in
        "distrobox enter"*) container_name="$(printf "%s" "${line}" | cut -d' ' -f3)"
        break ;;
        *"already exists")  container_name="$(printf "%s" "${line}" | cut -d' ' -f1)"
        break ;;
    esac
done

# If name is empty (we are assuming this means DBX failed somehow...), just launch the flatpak like nothing happend
if [ -z "${container_name}" ]; then
    launch_vscode
fi

# Install / update the REH server into the container via a login shell.
# TODO: Might be more worthwhile to install the server in the workspace directory, unsure though. For now, containers home will work.
if ! distrobox-enter "${container_name}" -- bash -l -c '"'"${HOME}"'/.local/share/remote.oss.update.vscodium-reh.sh" '"$(vscode_version 1)"' '"$(vscode_version 2)"''; then
    notify_log 2 "REH server failed to install / update!"
    launch_vscode
fi

# TODO: Make less hardcoded
readonly SERVER_PORT=4444

# shellcheck disable=2016
distrobox-enter "${container_name}" -- bash -l -c '"${HOME}/.vscodium-server/bin/current/bin/codium-server" --host localhost --port '"${SERVER_PORT}"' --telemetry-level off --without-connection-token' &
sleep 1

if [ -n "$(curl -s 'localhost:'"${SERVER_PORT}"'/version')" ]; then
    notify_log "REH server is listening on ${SERVER_PORT}"
else
    notify_log 2 "REH server failed to start!"
fi

launch_vscode
