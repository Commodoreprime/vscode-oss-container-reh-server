#!/bin/sh
# shellcheck disable=2086
# Wrapper around VSCode (VSCodium)

# NOTE: Might be useful to decouple from Distrobox, more flexibility and what not...

readonly ARGS="$*"

# Currently these are hardcoded, TODO: make it not that...
# TODO: Determine from $0?
readonly CODE_BIN="/usr/bin/codium"
readonly FLATPAK_ID="com.vscodium.codium"

# if [ -e "${HOME}/.nix-profile/etc/profile.d/nix.sh" ]; then
#     . "${HOME}/.nix-profile/etc/profile.d/nix.sh";
# fi

set -x

notify_log() {
    urgency="low"
    loglvl="NOTE"
    case "$1" in
        0)  shift ;;
        1)  urgency="normal"
            loglvl="WARN"
            shift ;;
        2)  urgency="critical"
            loglvl="FAIL"
            shift ;;
    esac
    notify-send --urgency="${urgency}" --icon=codium "Flatpak VSCodium" "$*"
    printf "[%s] %s\n" "${loglvl}" "$*"
}

# Launches VSCode with $ARGS.
launch_vscode() {
    if [ "$VSCODE_NO_FLATPAK" = 1 ]; then
        exec ${CODE_BIN} ${ARGS}
    fi
    # Maybe do something here?
    WRAP_ARGS="${ARGS}"
    exec /usr/bin/flatpak run --branch=stable --arch=x86_64 --command=/app/bin/codium --file-forwarding "${FLATPAK_ID}" ${WRAP_ARGS}
}

if [ "$VSCODE_NO_SERVER" = 1 ]; then
    notify_log "Launching without starting REH server"
    launch_vscode
fi

# Iterates up the tree to find the nearest .vscode/ directory.
# This *should* contain nessisary files (distrobox.conf && settings.json)
#  (we will worry about those files later...).
# If WORKSPACE_DIR reaches root w/o a .vscode directory then do nothing.
WORKSPACE_DIR="${PWD}"
while [ ! -d "${WORKSPACE_DIR}/.vscode" ]; do
    if [ "${WORKSPACE_DIR}" = "/" ]; then
        WORKSPACE_DIR=""
        break
    fi
    WORKSPACE_DIR="$(realpath "${WORKSPACE_DIR}/..")"
done

readonly DISTROBOX_MANIFEST="${WORKSPACE_DIR}/.vscode/distrobox.ini"

# If the workspace directory does not contain a .vscode/ directory,
#  or .vscode/distrobox.ini is NOT a readable file,
#  launch flatpak without doing anything else.
if [ -z "${WORKSPACE_DIR}" ] || [ ! -f "${DISTROBOX_MANIFEST}" ]; then
    launch_vscode
fi

# Begin assembling. NOTE: if multiple containers are specified, may need to handle that (can therefore break easily!).
export DBX_NON_INTERACTIVE=1
container_name="$(distrobox-assemble create --file "${WORKSPACE_DIR}/.vscode/distrobox.ini" | grep -m1 'distrobox enter' | cut -d' ' -f3)"

# If name is empty (we are assuming this means DBX failed somehow...), just launch the flatpak like nothing happend
if [ -z "${container_name}" ]; then
    launch_vscode
fi

# Install / update the REH server into the container via a login shell.
# TODO: Might be more worthwhile to install the server in the workspace directory, unsure though. For now, containers home will work.
if ! distrobox-enter "${container_name}" -- bash -l -c "${HOME}/.local/share/remote.oss.update.vscodium-reh.sh"; then
    notify_log 2 "REH server failed to install / update!"
    launch_vscode
fi

# TODO: Make less hardcoded
readonly SERVER_PORT=4444

if distrobox-enter "${container_name}" -- bash -l .vscodium-server/bin/current/bin/codium-server \
    --host localhost \
    --telemetry-level off \
    --without-connection-token \
    --port "${SERVER_PORT}"; then
    notify_log "REH server is listening on ${SERVER_PORT}"
else
    notify_log 2 "REH server failed to start!"
fi

launch_vscode
